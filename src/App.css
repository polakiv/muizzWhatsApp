:not(input) {
  -webkit-touch-callout: none !important;
  -webkit-user-select: none !important;
  -khtml-user-select: none !important;
  -moz-user-select: none !important;
  -ms-user-select: none !important;
  user-select: none !important;
  -webkit-tap-highlight-color: transparent !important;
}

@media (min-width: 760px) {
  .app {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #dadbd3;
  height: 100vh;
  z-index: 100;
  overflow: hidden;
  position: relative;
  width: 100vw;
}

.app__body { 
  box-shadow: -1px 4px 20px -6px rgba(0, 0, 0, 0.7);
}
}

.loader__container {
  background-color: white;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.app .MuiCircularProgress-svg {
  transform: scale(2.5);
}


/*

  async function handler(snap) {
    console.log("previous data: ", data.current);
    handling.current[i.current] = true;
    if (snap.docs?.length > 0) {
      function catchError(e) {
        console.log("errorrrrrr");
        lastMessages.current = JSON.parse(localStorage.getItem("lastMessages"));
        onlineStates.current = JSON.parse(localStorage.getItem("onlineStates"));
        if (!lastMessages.current || !onlineStates.current) {
          console.log("error: ", e);
          data = [];
        } else {
          data.current = snap.docs.map((cur, i) => ({...cur.data(), state: onlineStates.current[i]?.data, id: cur.id, lastMessage: lastMessages.current[i].data}));
        }
      }
      snap.docChanges().forEach(change => {
        console.log("change: ", change);
        console.log("change type: ", change.type);
        console.log("data: ", change.doc.data());
      })
      if (window.navigator.onLine) {
        try {
          if (data.current === null && window.navigator.onLine) {
            console.log("data was null");
            data.current = [];
            await Promise.all(snap.docs.map((doc, i) => {
              return new Promise(async (resolve, reject) => {
                try {
                  const s = await db.collection("rooms").doc(doc.id).get();
                  lastMessages.current[i] = {data: s.data().lastMessage, id: doc.id};
                  if (doc.data().userID) {
                     const m = await db.collection("users").doc(doc.data().userID).get();
                     onlineStates.current[i] = {data: m.data()?.state, id: doc.id};
                  }
                  data.current[i] = {...doc.data(), state: onlineStates.current[i]?.data, id: doc.id, lastMessage: lastMessages.current[i].data}
                  resolve(); 
                } catch(e) {
                  reject(e);
                };
              });
            }));
            console.log("data: ", data.current);
          } else if (data.current !==  null) {
            for (let change of snap.docChanges()) {
              console.log("previous data: ", data.current);
              console.log("previous onlineStates: ", onlineStates.current);
              console.log("previous lastMessages: ", lastMessages.current);
              const x = change.oldIndex !== change.newIndex;
              const index = data.current.findIndex(cur => cur.id === change.doc.id);
              console.log("index: ", index);
              if (change.type !== "removed") {
                console.log('1');
                if (change.type === "modified" && x) {
                  console.log('old index: ', change.oldIndex);
                  console.log('new index: ', change.newIndex);
                  console.log("change id: ", change.doc.id);
                  data.current = data.current.filter(cur => cur.id !== change.doc.id);               
                  onlineStates.current = data.current.filter(cur => cur.id !== change.doc.id);               
                  lastMessages.current = data.current.filter(cur => cur.id !== change.doc.id);   
                }
                console.log('3');
                const s = await db.collection("rooms").doc(change.doc.id).get();
                if (x) lastMessages.current.unshift({data: s.data().lastMessage, id: change.doc.id})
                  else lastMessages.current[index] = {data: s.data().lastMessage, id: change.doc.id};
                console.log('4');
                if (change.doc.data().userID) {
                  console.log('5');
                  const m = await db.collection("users").doc(change.doc.data().userID).get();
                  if (x) onlineStates.current.unshift({data: m.data()?.state, id: change.doc.id})
                    else onlineStates.current[index] = {data: m.data()?.state, id: change.doc.id};
                  console.log('6');
                } else {
                  console.log('7');
                  if (x) onlineStates.current.unshift(null) 
                    else onlineStates.current[index] = null;
                }
                console.log('8');
                if (x) data.current.unshift({...change.doc.data(), state: onlineStates.current[0]?.data, id: change.doc.id, lastMessage: lastMessages.current[0].data});
                  else data.current[index] = {...change.doc.data(), state: onlineStates.current[0]?.data, id: change.doc.id, lastMessage: lastMessages.current[0].data};
                console.log("data: ", data.current);
                console.log("onlineStates: ", onlineStates.current);
                console.log("lastMessages: ", lastMessages.current);
              } else {
                /*data.current.slice(index, 1);   
                onlineStates.current.slice(index, 1);   
                lastMessages.current.slice(index, 1);*//*
                data.current = data.current.filter(cur => cur.id !== change.doc.id);               
                onlineStates.current = data.current.filter(cur => cur.id !== change.doc.id);               
                lastMessages.current = data.current.filter(cur => cur.id !== change.doc.id);               
              }
            }
          }
        } catch(e) {
          catchError(e);
        }
      } else {
        catchError("no internet connection")
      }
      console.log("setting chats");
      setChats([...data.current]);
    } else {
      setChats([]);
      data.current = [];
    }
    delete handling.current[i.current];
    localStorage.setItem("lastMessages", JSON.stringify(lastMessages.current));
    localStorage.setItem("onlineStates", JSON.stringify(onlineStates.current));
  }

  async function asyncSnap(snap) {
    console.log("data from outside: ", data.current);
    console.log("i before: ", i.current);
    if (Object.keys(handling.current).length === 0) {
      i.current++;
      console.log("handler assigned, ", i.current);
      handlePromise.current = handler(snap);
    } else {
      console.log("next handler, ", i.current);
      const s = handlePromise.current;
      handlePromise.current = new Promise(async r => {
        console.log("handle promise executed, ", i.current);
        i.current++;
        await s;
        await handler(snap);
        console.log("handle promise resolved, ", i.current);
        r();
      })
    }
  }
*/

/*
  useEffect(() => {
    var s;
    if (user && !checkingVersion) {
      s = db.collection("users").doc(user.uid).collection("chats").orderBy("timestamp", "desc").onSnapshot(asyncSnap);
      setOnlineStatus(user.uid);
    }
    return () => {
      if (s) {
        s();
      }
    }
  }, [user, checkingVersion]);
*/

/*
  useEffect(() => {
    let s = null;
    if (chats?.length > 0) {
      s = chats.map((userChat, i, list) => {
        return db.collection("users").doc(userChat.userID).onSnapshot(doc => {
          const onlineState = doc.data()?.state;
          if (userChat?.state !== onlineState) {
            const arr = [...list]
            arr[i] = {
              ...userChat,
              state: onlineState
            };
            setChats(arr);
            onlineStates.current[i].data = onlineState;
            data.current[i].state = onlineStates;
            localStorage.setItem("onlineStates", JSON.stringify(onlineStates.current)); 
          };
        });
      });
    };
    return () => {
      if (s) {
        s.forEach(cur => cur());
      }
    }
  }, [chats])
*/

/*  function upadateRoomLastMessage(array) {
    if (array?.length > 0) {
      return array.map((userChat, i, list) => {
        if (!userChat.unreadMessages && userChat.unreadMessages !== 0) {
          return db.collection("rooms").doc(userChat.id).onSnapshot((doc) => {
            const lMessage = doc.data()?.lastMessage;
            console.log("last message: ", lMessage);
            console.log("userchat: ", userChat);
            if (userChat?.lastMessage !== lMessage) {
              const arr = [...list];
              arr[i] = {
                ...userChat,
                lastMessage: lMessage
              }
              setChats(arr);
              lastMessages.current[i].data = lMessage;
              data.current[i].lastMessage = lMessage;
              localStorage.setItem("lastMessages", JSON.stringify(lastMessages.current));
            } 
          });
        };
      });
    };
  }

    useEffect(() => {
    z.current = upadateRoomLastMessage(chats);
    return () => {
      if (z.current?.length > 0) {
        z.current.forEach(cur => cur ? cur() : null);
      };
    }
  }, [chats]);*/
  @media (min-width: 760px){
  .app {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #dadbd3;
    height: 100vh;
    z-index: 100;
    overflow: hidden;
    position: relative;
    width: 100vw;
  }
  
  .app__body {
    display: flex;
    /* position: absolute; */
    /* bottom: 0; */
    position: fixed;
    /* justify-content: center; */
    /* align-content: center; */
    /* margin: 0 auto; */
    background-color: #ededed;
    height: 100vh;
    max-height: 900px;
    width: 100vw;
    max-width: 1400px;
    /* margin-top: -30px; */
    /* margin-top: 30px; */
    box-shadow: -1px 4px 20px -6px rgba(0, 0, 0, 0.7);
  }
}
  .app__loading {
    display: table;
    text-align: center;
    height: 100%;
    width: 350px;
  }
  
  .app__loading > div {
    display: table-cell;
    vertical-align: middle;
  }
  
  .app__loading > div > .app__loading_circular {
    margin-top: 100px !important;
  }
  
  .app__loading > div > .app__loading_linear .MuiLinearProgress-root {
    margin-top: 100px !important;
  }
  
  .MuiCircularProgress-colorPrimary {
    color: gray !important;
  }
  
  .MuiLinearProgress-barColorPrimary {
    background-color: #000 !important;
  }
  
  .app-no-bg {
    z-index: auto;
  }
  
  @media screen and (max-width: 600px) {
    .app__body {
      display: inline;
    }
    .app__loading {
      width: 200px;
    }
  }
  
  @media screen and (min-width: 760px) and (max-width: 1440px) {
    .app__body {
      max-height: 100vh;
      margin-top: 0;
    }
  }
  
  @media screen and (min-width: 1441px) {
    .app::after {
      display: flex;
      position: fixed;
      top: 0;
      z-index: -1;
      width: 100%;
      height: 82px;
      content: "";
      background-color: #000;
      content: "UberClone";
      justify-content: center;
      align-items: center;
      font-weight: 100;
      font-size: xx-large;
      font-family: Helvetica;
      color: #fff;
    }
  }
  
@media (max-width: 760px) {
  .app__body {
    display: flex;
    position: relative;
    border-radius: 0;
    background-color: white;
    border-top: none;
    flex-direction: column-reverse;
    flex-wrap: wrap;
    justify-content: flex-start;
    align-items: stretch;
    align-content: stretch;
  }
}
.sidebar {
  display: flex;
  flex-direction: column;
  flex: 0.3 1;
  max-width: 30vw;
  min-width: 20vw;
  position: relative;
}

.sidebar__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 12px;
  border-right: 1px solid lightgrey;
  background-color: #ededed;
}

.sidebar__header--left {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  width: 47%;
}

.sidebar__header--left h4 {
  margin-left: 10px;
  font-size: 15px;
  font-weight: 500;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  max-width: 100%;
}

.sidebar__header--right {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  max-width: 120px;
}

.sidebar__header--right > .MuiSvgIcon-root {
  margin-right: 2vw;
  font-size: 24px !important;
}

.sidebar__search {
  display: flex;
  align-items: center;
  background-color: #f6f6f6;
  padding: 10px;
  border-right: 1px solid lightgrey;
}

.sidebar__search--container {
  display: flex;
  align-items: center;
  background-color: white;
  width: 100%;
  height: 35px;
  box-shadow: 0px 0px 8px 0px #00000016;
  /*border: 1px solid #00000016;*/
  border-radius: 20px;
  padding-right: 13px;
}

.sidebar__search--container > .MuiSvgIcon-root {
  color: grey;
  padding: 10px;
  box-sizing: content-box;
}

.sidebar__search--container > input {
  font-family: Roboto;
  font-size: 14px;
  font-weight: 400;
  border: none;
  margin-left: 0px;
  width: 100%;
}

.sidebar__search--container > input:focus {
  outline: none;
}

.sidebar__menu {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #ededed;
  border-right: 1px solid lightgrey;
}

.sidebar__menu > a,
.sidebar__menu > div {
  flex: 1;
  display: grid;
  place-items: center;
  padding-top: 15px;
  cursor: pointer;
}

.sidebar__menu div {
  width: 100%;
  display: grid;
  place-items: center;
}

.sidebar__menu div > .MuiSvgIcon-root {
  fill: #0000008a;
}

.sidebar__menu div > .sidebar__menu--line {
  opacity: 0;
  width: 100%;
  height: 3px;
  background: #0000008a;
  margin-top: 5px;
}

.sidebar__menu > .sidebar__menu--selected > div > .sidebar__menu--line {
  opacity: 1;
}

.sidebar__chat--container {
  flex: 1;
  background-color: white;
  overflow: scroll;
  position: relative;
}

.side {
  transform: scale(1) !important;
}

@media (max-width: 760px) {
  .sidebar {
    width: 100%;
    /* transform: scale(1.2); */
    transition: transform 250ms cubic-bezier(0.37, 0, 0.63, 1) !important;
    display: block;
    flex-direction: row;
    max-width: 100%;
    min-height: 700px;
    float: left;
 
  }
  .drawerLeft__header {
    background-color: #000;
    height: 60px;
    padding-left: 15px;
}
.app {
  width: 100%;
  overflow: hidden;
}
  .drawerLeft__header_container {
    display: flex;
    align-items: center;
    margin-top: 6px;
}
  .sidebar__header {
    border: none;
    width: 100%;
  }

  .sidebar__search {
    border: none;
    width: 100%;
  }

  .sidebar__menu {
    border: none;
    width: 100%;
  }
  .sidebar__chat--container {
    width: 100%;
  }
}
.dest{
  flex: 0.7 1;
  width: 70%;
  height: 80vh;
  display: flex;
  flex-direction: column;
  position: absolute;
  right: 0px;
  top: 0px;
  background-color: rgb(229, 221, 213);
  transform: translateZ(456px);
}
.destYMaps{
  flex: 1; 
  width: 100%;
   height: 100%;
    margin: 100px
}
.destMap{
  width:100%;
  height:70vh;
}
@media (max-width: 760px) {
  .dest{
    flex: 0.7 1;
    width: 100%;
    height: 60vh;
    display: block;
    flex-direction: column;
    position: relative;
    right: 0px;
    top: 0px;
    background-color: rgb(229, 221, 213);
    transform: translateZ(456px);
    float: left;
  } 
.destYMaps{
  flex: 1; 
  width: 100%;
   height: 60vh;
    margin: 100px;
}
.destMap{
  width:100%;
  height:60vh;
}
}
.chat {
  flex: 0.7 1;
  display: flex;
  flex-direction: column;
  position: relative;
/*  background-image: url("https://web.whatsapp.com/img/bg-chat-tile-light_686b98c9fdffef3f63127759e2057750.png");
*/
}

.page-enter {
  opacity: 0;
  transform: scale(0.9) translateZ(456px);
}

.page-enter-active {
  opacity: 1;
  transform: scale(1) translateZ(456px);
  transition: transform 300ms, opacity 300ms; 
}
#root > div > div > div > div > ymaps > ymaps > ymaps > ymaps > ymaps > ymaps >
ymaps{
  border-radius: 50%;
}
.page-exit {
  opacity: 1;
  transform: scale(1);
}

.page-exit-active {
  opacity: 0;
  transform: scale(0.9) translateZ(456px);
  transition: transform 300ms, opacity 300ms;
}

.chat__background {
/*   background-image: url("https://web.whatsapp.com/img/bg-chat-tile-light_686b98c9fdffef3f63127759e2057750.png");*/
  background-size: contain;
  background-position: center;
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: 0;
  opacity: 0.06;
}

.chat__header {
  padding: 10px;
  padding-right: 0px;
  padding-left: 12px;
  display: flex;
  align-items: center;
  border-bottom: 1px solid lightgrey;
  background-color: #ededed;
  z-index: 1;
}

.chat__header--info {
  flex: 1;
  margin-left: 8px;
}

.chat__header--info > h3 {
  font-size: 15px;
  font-weight: 500;
  margin-bottom: 3px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  width: 200px;
}

.chat__header--info > p {
  color: grey;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  width: 200px;
  font-size: 13px;
}

.chat__header--right {
  display: flex;
  justify-content: space-between;
  min-width: 50px;
} 

.chat__body--container {
  flex: 1;
  background-repeat: repeat;
  background-position: center;
  overflow: scroll;
  background-color: transparent;
  z-index: 1;
  position: relative; 
}
.chat__body--container:before {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
/*  -webkit-filter: invert(1);
  -moz-filter: invert(1);
  -o-filter: invert(1);
  -ms-filter: invert(1);
  filter: invert(1);*/
  background: url(./23.png) white;
  background-size: cover;
  background-repeat: no-repeat;
}
.chat__body {
  opacity: 1;
  background-color: transparent;
  padding: 0px 60px;
  padding-bottom: 98px !important;
  transition: opacity 200ms; 
  position: relative;
}

.chat__body--container::-webkit-scrollbar {
  display: none;
  -ms-overflow-style: none; 
  scrollbar-width: none;
}

.chat__body > .chat__message:last-child {
  opacity: 0;
  transition: opacity 150ms;
}

.paginateLoader {
  background: transparent !important;
  /*transition: height 200ms;*/
}

.paginateLoader > div > .MuiCircularProgress-svg {
  transform: scale(1);
  /*display: none;*/
}

.chat__message {
  z-index: 0;
  position: relative;
  font-size: 16px;
  padding: 10px;
  border-radius: 10px;
  background-color: #ffffff;
  padding-top: 22px;
  word-wrap: break-word;
}

.chat__message--message {
  margin-right: 10px;
  color: white;
}

.chat__reciever {
  margin-left: auto;
  background-color: #000;
}

.chat__lastMessage {
  margin-bottom: 0;
  opacity: 0;
  animation: fade-in 300ms forwards 600ms;
}

.chat__name {
  position: absolute;
  top: 8px;
  left: 9px;
  font-weight: 500;
  font-size: 10.5px;
  color: white;
}

.image-container {
  position: relative;
  max-height: 300px;
  max-width: 300px;
  overflow: hidden;
  margin: 10px 0;
  border-radius: 10px;
}

.image-container img {
  /*object-fit: cover;*/
  width: 100%;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
}

.chat__message img {
  cursor: pointer
}

.image__container--loader {
  transform:  translateX(-50%) translateY(-50%);
  position: absolute;
  left: 50%;
  top: 50%;
  width: 100%;
  height: 100%;
  display: grid;
  place-items: center;
}

.image-container .MuiCircularProgress-svg {
  transform: none !important;
}

.chat__timestamp {
  font-size: 10px;
  text-align: right;
  color: white;
}

.scroll {
  width: 52px;
  height: 52px;
  border-radius: 50%;
  background-color: white;
  position: absolute;
  left: 50%;
  bottom: 78px;
  transform: translateX(-50%) scale(1);
  transition: transform 150ms;
  z-index: 1;
  box-shadow: 0px 0px 2px 0px #00000087;
  cursor: pointer;
}

.scroll svg {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
}

.scroll div {
  position: absolute;
  top: 0;
  right:0;
  width: 19px;
  height: 19px;
  border-radius: 50%;
  background-color: #06D755;
  color: white;
  font-size: 10px;
  font-weight: 500;
  display: grid;
  place-items: center;
  color: white;
}

.scroll-enter {
  transform: translateX(-50%) scale(0.7);
  opacity: 0;
}

.scroll-enter-active {
  opacity: 1;
  transform: translateX(-50%) scale(1);
  transition: opacity 300ms, transform 300ms;
}

.scroll-exit {
  opacity: 1;
  transform: translateX(-50%) scale(1);
}

.scroll-exit-active {
  opacity: 0;
  transform: translateX(-50%) scale(0.7);
  transition: opacity 300ms, transform 300ms;
}

.chat__deleting {
  position: absolute;
  width: 100%;
  height: 100%;
  display: grid;
  place-items: center;
  background-color: #ffffff6c;
  z-index: 2;
}

.seen {
  position: absolute;
  height: 30px;
  width: 94px;
  right: 60px;
  bottom: 58px;
  opacity: 0 !important;
}

.seen-animate-enter {
  opacity: 0 !important;
}

.seen-animate-enter-active {
  opacity: 1 !important;
  transition: opacity 200ms;
}

.seen-animate-exit {
  opacity: 0 !important;
}

.seen-animate-exit-active {
  opacity: 0 !important;
}

.seen-animate-enter-done {
  opacity: 1 !important;
}

.seen p {
  background-color: #000;
  padding: 3px 15px;
  text-align: center;
  position: absolute;
  right: 0;
  border-radius: 10px;
  color: white;
}

.seen span {
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 100;
}

.seen .MuiSvgIcon-root {
  transform: scale(0.9);
  margin-left: 5px;
}

@keyframes fade-in {
  from {
      opacity: 0;
  }
  to {
      opacity: 1;
  }
}

@media (min-width: 761px) {
  .chat__header--info > h3 {
      width: 100%;
  }

  .chat__header--info > p {
      width: 350px;
  }
}

@media (max-width: 760px) {
  .chat__background {
    /*   background-image: url("https://web.whatsapp.com/img/bg-chat-tile-light_686b98c9fdffef3f63127759e2057750.png");*/
      background-size: contain;
      background-position: center;
      position: absolute;
      width: 100%;
      height: 67vh !important;
      z-index: 0;
      opacity: 0.06;
    }
  .seen {
      right: 20px;
  }
  .chat {
    position: absolute;
    width: 100%;
    height: 67vh;
    top: 0;
    left: 0;
    background-color: #e5ddd5;
    opacity: 1;
    transform: scale(1);
    transition: transform 250ms cubic-bezier(0.37, 0, 0.63, 1), opacity 250ms cubic-bezier(0.37, 0, 0.63, 1);
  }

  .chat__body {
      padding:0px 20px;
  }

  .image-container .MuiCircularProgress-svg {
      transform: scale(1.5) !important;
  }
  .chat__header {
      padding: 10px;
      padding-left: 8px;
  }
  
   
  
  .chat__header--info > p, .chat__header--info > h3 {
      width: 180px;
  }
  .chat__header--info > p {
      font-size: 11px;
      font-weight: 400;
  }

  .page-enter-active {
      opacity: 1;
      transform: scale(1);
      transition: transform 300ms cubic-bezier(0.37, 0, 0.63, 1), opacity 300ms cubic-bezier(0.37, 0, 0.63, 1); 
  }

  .page-exit-active {
      opacity: 0;
      transform: scale(0.9);
      transition: transform 300ms cubic-bezier(0.37, 0, 0.63, 1), opacity 300ms cubic-bezier(0.37, 0, 0.63, 1);
  }
}

.chat-animate {
  opacity: 1;
  transform: scale(1);
}