{"version":3,"sources":["UberTypes.js","DestinationSearch.js"],"names":["useStyles","makeStyles","theme","root","width","marginTop","spacing","UberTypes","props","classes","React","useState","cart","setCart","carterr","setCarterr","open","setOpen","dist","putCart","a","axios","then","response","console","log","className","Collapse","in","style","cursor","backgroundColor","Alert","color","action","IconButton","aria-label","size","onClick","e","options","suppressMapOpenBlock","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","gps","localStorage","setItem","accuracy","lati","getItem","lngi","gpsi","mapState","center","zoom","DestinationSearch","drawerLeft","setDrawerLeft","typeState","onSubmit","users","carsfire","flex","height","display","flexDirection","right","top","transform","DrawerLeft","db","auth","storage","storage1","margin","query","apikey","modules","state","onApiAvaliable","ymaps","instanceRef","ref","routePanel","set","from","to","type","obj","getRouteAsync","multiRoute","model","events","add","activeRoute","getActiveRoute","getPaths","each","path","segments","getSegments","obje","segment","properties","get","text","distance","value","catch","bind","float","popupWidth","maxWidth","rotate","geometry","coordinates","hintContent","balloonContent","iconCaption","iconImageRotation","map","car","name","about","iconLayout","iconImageHref","photoURL","iconImageSize","iconImageOffset","userID","Button","padding","alignItems","disabled","variant"],"mappings":"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","file":"static/js/4.77f6baf9.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n  \r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport * as axios from 'axios';\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n   // height: Dimensions.get('window').height - 400\r\n  },\r\n  \r\n}));\r\n\r\nconst UberTypes = (props) => { \r\n  const classes = useStyles();\r\n  const [cart, setCart] = React.useState(false);\r\n  const [carterr, setCarterr] = React.useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [dist, setOpendist] = React.useState();\r\n\r\n  const putCart = async () => {\r\n    try {\r\n      const cartData = await axios\r\n        .get(  \r\n          //&=${getCarr} в конец след строки вставить, если нужны\r\n          //  cartreact&searchcar=${getCarr}\r\n          `https://taxi.bigdatamicrodata.pp.ua/index.php?route=api/cartreact/add`,\r\n        )\r\n        .then((response) => {\r\n          setCart(true);\r\n          console.log(response);\r\n        });\r\n    } catch (e) {\r\n      setCarterr(true);\r\n      console.log(e);\r\n    }\r\n  };\r\n  // putCart();\r\n\r\n  return (\r\n    <div className={classes.root} >  \r\n     <Collapse\r\n        in={carterr}\r\n        style={{\r\n          cursor: 'pointer',\r\n          backgroundColor: 'red',\r\n        }}>\r\n        <Alert\r\n          style={{\r\n            cursor: 'pointer',\r\n            backgroundColor: 'red',\r\n            color:\"inherit\"\r\n          }}\r\n          action={\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              color=\"inherit\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setCarterr(false);\r\n              }}>\r\n              <CloseIcon   />\r\n            </IconButton>\r\n          }>\r\n          Возможно что-то с интернетом, ваша заявка не проходит, попробуйте еще\r\n          раз \r\n        </Alert>\r\n      </Collapse>\r\n       <Collapse\r\n        in={cart}\r\n        style={{\r\n          cursor: 'pointer',\r\n          backgroundColor: 'blue',\r\n        }}>\r\n        <Alert\r\n          action={\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              color=\"inherit\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setCart(false);\r\n              }}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          }>\r\n          Ваша заявка подана и будет висеть на доске обьявлений в течении часа.\r\n          <IconButton\r\n              aria-label=\"menu\"\r\n              color=\"inherit\"\r\n              size=\"small\"\r\n              onClick={(e) => {\r\n           //     navigation.navigate('OrderPage');\r\n              }}> \r\n               Нажмите чтобы отслеживать.\r\n            </IconButton>\r\n        </Alert>\r\n      </Collapse>\r\n      <Collapse\r\n        in={open}\r\n        style={{\r\n          cursor: 'pointer',\r\n        }}>\r\n        <Alert\r\n          action={\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              color=\"inherit\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setOpen(false);\r\n              }}>\r\n              <CloseIcon  />\r\n            </IconButton>\r\n          }>\r\n          {dist} {' '}\r\n          <IconButton\r\n            onClick={() => {\r\n              putCart();\r\n            }}>\r\n            Подтвердить\r\n          </IconButton>\r\n        </Alert>\r\n      </Collapse> \r\n      {/* {typesData.map((type) => (\r\n        <UberTypeRow type={type} key={type.id}  \r\n        onClick={(e) => {\r\n          localStorage.setItem('UberTypeRow', type.id) \r\n          navigation.navigate('Home')\r\n        }}  \r\n         \r\n        />\r\n      ))} \r\n      <Button\r\n        style={{\r\n          flex: 1,\r\n          backgroundColor: 'black',\r\n          color: 'white',\r\n          padding: 10,\r\n          margin: 10,\r\n          alignItems: 'center',\r\n          cursor: 'pointer',\r\n        }}\r\n        disabled={open}\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          setOpen(true);\r\n          setOpendist(localStorage.getItem('distance'));\r\n        }}>\r\n        Оставить заявку для всех\r\n      </Button>*/}\r\n    </div>\r\n  );\r\n};\r\nexport default UberTypes;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n//import {Image, Text, View, Alert} from 'react-native';\r\n//import {useRoute, useNavigation} from '@react-navigation/native';\r\nimport * as axios from \"axios\";\r\nimport {\r\n  YMaps,\r\n  Map,\r\n  Placemark,\r\n  RouteButton,\r\n  GeolocationControl,\r\n  RoutePanel,\r\n} from \"react-yandex-maps\";\r\n\r\nimport DrawerLeft from \"./DrawerLeft\";\r\nimport db, {\r\n  auth,\r\n  storage1,\r\n  provider,\r\n  createTimestamp,\r\n  messaging,\r\n} from \"./firebase\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport UberTypes from \"./UberTypes\";\r\n\r\nconst options = {\r\n  suppressMapOpenBlock: true,\r\n};\r\n\r\nnavigator.geolocation.getCurrentPosition(function (position) {\r\n  // Текущие координаты.\r\n  let lat = position.coords.latitude;\r\n  let lng = position.coords.longitude;\r\n  let gps = lat + \", \" + lng;\r\n\r\n  localStorage.setItem(\"lat\", lat);\r\n  localStorage.setItem(\"lng\", lng);\r\n  localStorage.setItem(\"gps\", gps);\r\n  let accuracy = position.coords.accuracy;\r\n  localStorage.setItem(\"accuracy\", accuracy);\r\n // console.log(\"lat доступна \" + lat); // Геолокация доступна\r\n // console.log(\"lng доступна \" + lng); // Геолокация доступна\r\n // console.log(\"accuracy доступна \" + accuracy); // Погрешность\r\n});\r\nlet lati = localStorage.getItem(\"lat\");\r\nlet lngi = localStorage.getItem(\"lng\");\r\nvar gpsi = localStorage.getItem(\"gps\");\r\nconst mapState = { center: [lati, lngi], zoom: 12 };\r\n  console.log(\"gps DestinationSearch \" + gpsi); \r\n\r\nconst DestinationSearch = (props) => {\r\n  console.log('props', props);\r\n  //\tdebugger;\r\n\r\n  const [drawerLeft, setDrawerLeft] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerLeftOpen = () => {\r\n    //   setMenuSidebar(null);\r\n    setDrawerLeft(true);\r\n  };\r\n // console.log(props);\r\n  const typeState = useState(null);\r\n\r\n  //const route = useRoute();\r\n  //const navigation = useNavigation();\r\n\r\n  const onSubmit = async () => {\r\n    const [type] = typeState;\r\n    if (!type) {\r\n      return;\r\n    }\r\n\r\n    //console.log('onSubmit 55555555');\r\n    // submit to server\r\n  /*  try {\r\n      //\tconst userInfo = await Auth.currentAuthenticatedUser();\r\n\r\n      const date = new Date();\r\n      const input = {\r\n        createdAt: \"\",\r\n        type,\r\n        originLatitude: localStorage.getItem(\"distance\"),\r\n        oreiginLongitude: localStorage.getItem(\"distance\"),\r\n\r\n        destLatitude: localStorage.getItem(\"distance\"),\r\n        destLongitude: localStorage.getItem(\"distance\"),\r\n\r\n        userId: 1,\r\n        carId: \"1\",\r\n        status: \"NEW\",\r\n      };\r\n\r\n          Alert.alert(\r\n\t\t\t\t(title = 'Ура!'),\r\n\t\t\t\t(message = 'Вы заказали авто!'),\r\n\t\t\t\t(buttons = [\r\n\t\t\t\t{\r\n\t\t\t\ttext: 'Перейти на главную',\r\n\t\t\t\tonPress: () => navigation.navigate('Home'),\r\n\t\t\t\t},\r\n\t\t\t\t]),\r\n\t\t\t); \r\n      //  navigation.navigate('OrderPage', { id: response.data.createOrder.id });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    */\r\n  };\r\n  if (localStorage.getItem(\"userName\") === null) {\r\n    localStorage.setItem(\"userName\", \" залогиньтесь\");\r\n  }\r\n  const [cars, setCars] = useState([]);\r\n  const [carsfire, setCarsfire] = useState(  props.users);\r\n  //console.log(\"carsfire\", carsfire);\r\n  //console.log(\"cars\", cars);\r\n  console.log(\"props.users\", props.users);\r\n  //props.users\r\n  const [orderRoute, setOrderRoute] = useState([]);\r\n\r\n  /*\r\n  useEffect(() => {\r\n    const fetchCars = async (getCarr) => {\r\n      try {\r\n        const usersData = await axios\r\n          .get(\r\n            `https://taxi.bigdatamicrodata.pp.ua/index.php?route=api/searchcar&searchcar=${getCarr}`\r\n          )\r\n          .then((response) => {\r\n            setCars(response.data.items);\r\n            console.log(response.data.items);\r\n          });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    fetchCars(\"\");\r\n  }, []);\r\n  */\r\n\r\n  //  console.log('props 55555555');\r\n  return (\r\n    <div\r\n      style={{\r\n        flex: 1,\r\n        width: \"70%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        position: \"absolute\",\r\n        right: 0,\r\n        top: 0,\r\n        backgroundColor: \"#e5ddd5\",\r\n        transform: \"translateZ(456px)\",\r\n      }}\r\n    >\r\n      <DrawerLeft\r\n        drawerLeft={drawerLeft}\r\n        setDrawerLeft={setDrawerLeft}\r\n        db={db}\r\n        auth={auth}\r\n        storage={storage1}\r\n      />\r\n      <YMaps\r\n        style={{ flex: 1, width: \"100%\", height: \"100%\", margin: 100 }}\r\n        query={{ apikey: \"77344b8e-1d6e-4ba9-be6c-dfe62831be7a\" }}\r\n      >\r\n        <Map\r\n          options={options}\r\n          modules={[\"templateLayoutFactory\", \"layout.ImageWithContent\"]}\r\n          state={mapState}\r\n          width={\"100%\"}\r\n          height={500}\r\n          //  rotate=\"85deg\"\r\n          onApiAvaliable={(ymaps) => this.onApiAvaliable(ymaps)}\r\n        >\r\n          <RouteButton\r\n            instanceRef={(ref) => {\r\n              if (ref) {\r\n                ref.routePanel.state.set({\r\n                  from: \"\",\r\n                  to: \"\",\r\n                  type: \"auto\",\r\n                });\r\n                const obj = ref.routePanel.getRouteAsync();\r\n                obj\r\n                  .then(function (multiRoute) {\r\n                    multiRoute.model.events.add(\"requestsuccess\", function () {\r\n                      const activeRoute = multiRoute.getActiveRoute();\r\n\r\n                      if (activeRoute) {\r\n                        var activeRoutePaths = activeRoute.getPaths();\r\n                        activeRoutePaths.each(function (path) {\r\n                          // Путь автомобильного маршрута - это\r\n                          // объект multiRouter.driving.Path.\r\n                          // Получение коллекции сегментов в пути.\r\n                          var segments = path.getSegments();\r\n                          // Проход по коллекции сегментов и вывод\r\n                          // информации о каждом сегменте.\r\n                          console.log(segments);\r\n                          var obje = \"\";\r\n                          segments.each(function (segment) {\r\n                            // Вывод информации о сегменте.\r\n                            console.log(\r\n                              \" Маневр в конце сегмента: \" +\r\n                                segment.properties.get(\"action\").text\r\n                            );\r\n                            obje +=\r\n                              \" Маневр в конце сегмента: \" +\r\n                              segment.properties.get(\"action\").text;\r\n\r\n                            console.log(\r\n                              \" Длина сегмента: \" +\r\n                                segment.properties.get(\"distance\").text\r\n                            );\r\n\r\n                            obje +=\r\n                              \" Длина сегмента: \" +\r\n                              segment.properties.get(\"distance\").text;\r\n\r\n                            console.log(\r\n                              \" Время прохождения сегмента: \" +\r\n                                segment.properties.get(\"duration\").text\r\n                            );\r\n\r\n                            obje +=\r\n                              \" Время прохождения сегмента: \" +\r\n                              segment.properties.get(\"duration\").text;\r\n\r\n                            console.log(\r\n                              \" По какой улице проходит сегмент: \" +\r\n                                segment.properties.get(\"street\")\r\n                            );\r\n\r\n                            obje +=\r\n                              \" По какой улице проходит сегмент: \" +\r\n                              segment.properties.get(\"street\");\r\n                          });\r\n                          console.log(\"obje\", obje);\r\n                          localStorage.setItem(\"obje\", obje);\r\n                        });\r\n\r\n                        const distance =\r\n                          activeRoute.properties.get(\"distance\").text;\r\n                        console.log(\"Длина маршрута: \", distance);\r\n                        console.log(\r\n                          \"Примерное время проезда: \" +\r\n                            activeRoute.properties.get(\"duration\").text\r\n                        );\r\n                        //  setOrderRoute(distance);\r\n                        localStorage.setItem(\r\n                          \"distanceValue\",\r\n                          activeRoute.properties.get(\"distance\").value\r\n                        );\r\n                        localStorage.setItem(\r\n                          \"distance\",\r\n                          \"Расстояние: \" +\r\n                            activeRoute.properties.get(\"distance\").text\r\n                        );\r\n                        localStorage.setItem(\r\n                          \"duration\",\r\n                          \"Примерное время проезда: \" +\r\n                            activeRoute.properties.get(\"duration\").text\r\n                        );\r\n                        console.log(distance);\r\n\r\n                        //   distance=distance;\r\n                        //   duration= activeRoute.properties.get(\"duration\").text;\r\n                        //   db.collection('Trips').doc(id).set({\r\n                        //     distance: distance\r\n                        //   }, { merge: true })\r\n                      }\r\n                    });\r\n                    return multiRoute;\r\n                  })\r\n                  .then(function () {\r\n                    return obj;\r\n                  })\r\n                  // простое и полезное окончание цепочки промисов:\r\n                  .catch(console.log.bind(console));\r\n              }\r\n            }}\r\n            options={{\r\n              float: \"right\",\r\n              size: \"large\",\r\n              popupWidth: \"210px\",\r\n              maxWidth: \"210px\",\r\n            }}\r\n            state={{\r\n          //    expanded: \"true\", раскрытие блока по умолчанию\r\n              popupWidth: \"210px\",\r\n            }}\r\n          />\r\n\r\n          <GeolocationControl options={{ float: \"left\" }} />\r\n          \r\n          <Placemark\r\n              style={{\r\n                width: 10,\r\n                transform: [{ rotate: \"90deg\" }],\r\n              }}\r\n              key='fdsdfsdfhghf654gfd'\r\n              geometry={{\r\n                type: \"Point\",\r\n              //    coordinates: [47.988736, 37.7913344],\r\n                 coordinates: [lati,lngi],\r\n              }}\r\n              properties={{\r\n                hintContent: \"я\",\r\n                balloonContent: \"я\",\r\n                iconCaption: \"я\",\r\n                iconImageRotation: 50,\r\n              }}\r\n              modules={[\"geoObject.addon.hint\"]}\r\n           /*   options={{\r\n            //    iconLayout: \"default#image\",\r\n           //     iconImageHref: car.photoURL,\r\n            //    iconImageSize: [74, 61],\r\n            //    iconImageOffset: [-3, -42],\r\n            //    iconImageRotation: 50,\r\n              }}\r\n              onClick={(e) => {\r\n                localStorage.setItem(\"car.name \", car.name);\r\n                //    navigation.navigate('Home');\r\n              }}*/\r\n            />\r\n          {carsfire?.map((car) => (\r\n            <Placemark\r\n              style={{\r\n                width: 10,\r\n                transform: [{ rotate: \"90deg\" }],\r\n              }}\r\n              key={car.userID}\r\n              geometry={{\r\n                type: \"Point\",\r\n                //  coordinates: [47.988736, 37.7913344],\r\n                coordinates: [car.latitude, car.longitude],\r\n              }}\r\n              properties={{\r\n                hintContent: car.name + \" \" + car.about,\r\n                balloonContent: car.name + \" \" + car.about,\r\n                iconCaption: car.name + \" \" + car.about,\r\n                iconImageRotation: 50,\r\n              }}\r\n              modules={[\"geoObject.addon.hint\"]}\r\n              options={{\r\n                iconLayout: \"default#image\",\r\n                iconImageHref: car.photoURL,\r\n                iconImageSize: [74, 61],\r\n                iconImageOffset: [-3, -42],\r\n                iconImageRotation: 50,\r\n              }}\r\n              onClick={(e) => {\r\n                localStorage.setItem(\"car.name \", car.name);\r\n                //    navigation.navigate('Home');\r\n              }}\r\n            />\r\n          ))}\r\n        </Map>\r\n      </YMaps>\r\n\r\n      <UberTypes typeState={typeState} onSubmit={onSubmit} />\r\n      <Button\r\n        style={{\r\n      \r\n          backgroundColor: \"black\",\r\n          color: \"white\",\r\n          padding: 10,\r\n          margin: 10,\r\n          alignItems: \"center\",\r\n          cursor: \"pointer\",\r\n        }}\r\n        disabled={open}\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          handleDrawerLeftOpen();\r\n        }}\r\n      >\r\n        Оставить заявку для всех\r\n      </Button>\r\n    </div>\r\n  );\r\n  // console.log('instance55555555', instanceRef);\r\n  //\tconsole.log(distance); //  /routename\r\n  // getRoute();\r\n  // localStorage.setItem(\"lng\", data);\r\n};\r\nexport default DestinationSearch;\r\n"],"sourceRoot":""}